version: "3.9"

services:
  backend:
    depends_on:
      - db
      - redis
    platform: linux/x86_64
    build:
      context: ./backend
    ports:
      - "8000:8000"

  frontend:
    depends_on:
      - nodeserver
    build:
      context: ./frontend
    ports:
      - "3000:3000"

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: "password"
      POSTGRES_USER: "username"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  redis:
    profiles:
      - use_local_redis
    image: redis
    restart: always
    volumes:
      - ./data/redis:/data

  nginx:
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    build:
      context: ./nginx
    ports:
      - "3000:80"
      - "3443:443"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  coder:
    image: ghcr.io/coder/coder:${CODER_VERSION:-latest}
    ports:
      - "7080:7080"
    environment:
      CODER_PG_CONNECTION_URL: "postgresql://${POSTGRES_USER:-username}:${POSTGRES_PASSWORD:-password}@database/${POSTGRES_DB:-coder}?sslmode=disable"
      CODER_ADDRESS: "0.0.0.0:7080"
      CODER_ACCESS_URL: "${CODER_ACCESS_URL}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      database:
        condition: service_healthy

volumes:
  coder_data:
